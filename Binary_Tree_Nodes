/*
You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, 
and P is the parent of N.

+--------+---------+
| Column | Type    |
+--------+---------+
| N      | Integer |
| P      | Integer |
+--------+---------+

Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.

Sample input:
+--------+---------+
| N      | P       |
+--------+---------+
| 1      | 2       |
| 3      | 2       |
| 6      | 8       | 
| 9      | 8       |
| 2      | 5       |
| 8      | 5       |
| 5      | null    |
+--------+---------+

Sample output:
1 Leaf
2 Inner
3 Leaf
5 Root
6 Leaf
8 Inner
9 Leaf
*/

/* ORACLE MYSQL */

SELECT N ,
(CASE 
WHEN P IS NULL THEN 'Root' 
WHEN EXISTS (SELECT P FROM BST B WHERE A.N=B.P) THEN 'Inner' 
ELSE 'Leaf' 
END) 
FROM BST A ORDER BY N;


/* MYSQL */
SELECT N, 
CASE 
WHEN P IS NULL THEN 'Root' 
WHEN (SELECT COUNT(*) FROM BST WHERE P=B.N)>0 THEN 'Inner' 
ELSE 'Leaf' 
END 
FROM BST AS B ORDER BY N;


SELECT N, IF(P IS NULL,'Root',IF((SELECT COUNT(*) FROM BST WHERE P=B.N)>0,'Inner','Leaf')) FROM BST AS B ORDER BY N;
























