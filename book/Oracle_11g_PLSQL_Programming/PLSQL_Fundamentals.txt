PLSQL Fundamentals

1. PL/SQL stands for Procedure Language/Structured Query Language

2. The PL/SQL code in this book uses uppercase for command words and lowercase for variables, column names, and stored program calls.

3. PL/SQL was developed by modeling concepts of structured programming, static data typing, modularity, exception management, and parallel (concurrent) processing found in the Ada programming language.

4. 
Anchoring PL/SQL variables to database catalog objects is an effective form of structural coupling.

Subtyping the base types let Oracle develop a multiple-hierarchy object tree, which continues to grow and mature. 

PL/SQL also supports building SQL statements at run time. Run-time SQL statements are dynamic SQL. You can use two approaches for dynamic SQL: one is Native Dynamic SQL (NDS) and the other is the DBMS_SQL package. 

5. anoymous-block prototype:

[DECLARE]
       declaration_statements
BEGIN
       execution_statements
[EXCEPTION]
       exception_handling_statements
END; /



The declaration block lets you define datatypes, structures, and variables.

The execution block lets you process data. The execution block can contain variable assignments, comparisons, conditional operations, and iterations.

The BEGIN reserved word starts the exception block, and the optional EXCEPTION or required END reserved word ends it.

The exception handling block lets you manage exceptions. You can both catch and manage them there.


6. Named Block


FUNCTION function_name
[( parameter1 [IN][OUT] [NOCOPY] sql_data_type | plsql_data_type
, parameter2 [IN][OUT] [NOCOPY] sql_data_type | plsql_data_type
, parameter(n+1) [IN][OUT] [NOCOPY] sql_data_type | plsql_data_type )]

RETURN [ sql_data_type | plsql_data_type ]
[ AUTHID {DEFINER | CURRENT_USER}]
[ DETERMINISTIC | PARALLEL_ENABLED ]
[ PIPELINED ]
[ RESULT_CACHE [RELIES ON table_name]] IS
  declaration_statements
BEGIN
  execution_statements
[EXCEPTION]
  exception_handling_statements
END; /


Functions can behave as pass-by-value or pass-by-reference subroutines. Pass-by-value subroutines define formal parameters using an IN mode only. This means that the variable passed in cannot change during execution of the subroutine. Pass-by-reference subroutines define formal parameters using IN and OUT, or OUT-only modes.


Oracle 11g continues passing copies of variables instead of references to variables, unless you designate a NOCOPY hint. 


7. Named-block procedure prototype:

PROCEDURE procedure_name
( parameter1 [IN][OUT] [NOCOPY] sql_data_type | plsql_data_type , parameter2 [IN][OUT] [NOCOPY] sql_data_type | plsql_data_type , parameter(n+1) [IN][OUT] [NOCOPY] sql_data_type | plsql_data_type ) [ AUTHID {DEFINER | CURRENT_USER}]
  declaration_statements
BEGIN
  execution_statements
[EXCEPTION]
  exception_handling_statements
END; /


They act like functions in many ways but cannot return a datatype.


the $$ symbol denotes a PL/SQL conditional compilation-time variable.

8.
						
Optimization Level			Optimization Meaning
0							No optimization.
1							Moderate optimization, may eliminate unused code or exceptions.
2 (default)					Aggressive optimization, may rearrange source code flow.


Regular Expressions:
■ REGEXP_LIKE This searches a string for a regular expression pattern match.
■ REGEXP_INSTR This searches for the beginning position of a regular expression
pattern match.
■ REGEXP_SUBSTR This searches for a substring using a regular expression pattern match.
■ REGEXP_REPLACE This replaces a substring using a regular expression pattern match.


Quoting:
old way is
SELECT 'It''s a bird, no plane, no it can''t be ice cream!' AS phrase
FROM   dual;

The new way is
SELECT q'(It's a bird, no plane, no it can't be ice cream!)' AS phrase
FROM   dual;
 

Both of these produce the following output:
PHRASE
------------------------------------------------
It's a bird, no plane, no it can't be ice cream!


exception e.g
DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
DBMS_UTILITY.FORMAT_CALL_STACK
DBMS_UTILITY.FORMAT_ERROR_STACK

anonymous block:

DECLARE
  local_exception EXCEPTION;
  FUNCTION nested_local_function
  RETURN BOOLEAN IS
    retval BOOLEAN := FALSE;
  BEGIN
    RAISE local_exception;
    RETURN retval;
  END;
BEGIN
  IF nested_local_function THEN
    dbms_output.put_line('No raised exception');
  END IF;
EXCEPTION
  WHEN others THEN
	dbms_output.put_line('DBMS_UTILITY.FORMAT_CALL_STACK'); dbms_output.put_line('------------------------------'); dbms_output.put_line(dbms_utility.format_call_stack); dbms_output.put_line('DBMS_UTILITY.FORMAT_ERROR_BACKTRACE'); dbms_output.put_line('-----------------------------------'); dbms_output.put_line(dbms_utility.format_error_backtrace); dbms_output.put_line('DBMS_UTILITY.FORMAT_ERROR_STACK'); dbms_output.put_line('-------------------------------'); dbms_output.put_line(dbms_utility.format_error_stack);
END; /



Wrapping PLSQL

hello world example:

BEGIN dbms_ddl.create_wrapped(
    'CREATE OR REPLACE FUNCTION hello_world RETURN STRING AS '
    ||'BEGIN '
    ||'  RETURN ''Hello World!''; '
    ||'END;');
END; /


SQL> COLUMN message FORMAT A20 HEADING "Message"
SQL> SELECT hello_world AS message FROM dual;
Message
--------------------
Hello World!

You can test this by querying stored function implementation in the TEXT column of the USER_SOURCE table, like the following:
SQL> COLUMN text FORMAT A80 HEADING "Source Text"
SQL> SET PAGESIZE 49999
SQL> SELECT text FROM user_source WHERE name = 'HELLO_WORLD';





