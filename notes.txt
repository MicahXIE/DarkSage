1. database normalization(数据库范式)
If a table is not properly normalized and have data redundancy then it will not only eat up extra memory space but will also make it difficult to handle and update the database, without facing data loss. Insertion, Updation and Deletion Anamolies are very frequent if database is not normalized.

First Normal Form (1NF)
1NF的定义为：符合1NF的关系中的每个属性都不可再分。
For a table to be in the First Normal Form, it should follow the following 4 rules:

1. It should only have single(atomic) valued attributes/columns.
2. Values stored in a column should be of the same domain
3. All the columns in a table should have unique names.
4. And the order in which data is stored, does not matter.

Second Normal Form (2NF)
2NF在1NF的基础之上，消除了非主属性对于码的部分函数依赖。
若在一张表中，在属性（或属性组）X的值确定的情况下，必定能确定属性Y的值，那么就可以说Y函数依赖于X，写作 X → Y

For a table to be in the Second Normal Form,

1. It should be in the First Normal form.
2. And, it should not have Partial Dependency.

Third Normal Form (3NF)
第三范式（3NF） 3NF在2NF的基础之上，消除了非主属性对于码的传递函数依赖。
A table is said to be in the Third Normal Form when,

1. It is in the Second Normal form.
2. And, it doesn't have Transitive Dependency. (可迁移的)


Boyce and Codd Normal Form (BCNF)
Boyce and Codd Normal Form is a higher version of the Third Normal form. This form deals with certain type of anomaly that is not handled by 3NF. A 3NF table which does not have multiple overlapping candidate keys is said to be in BCNF. For a table to be in BCNF, following conditions must be satisfied:

1. R must be in 3rd Normal Form
2. and, for each functional dependency ( X → Y ), X should be a super Key.


Fourth Normal Form (4NF)
A table is said to be in the Fourth Normal Form when,

1. It is in the Boyce-Codd Normal Form.
2. And, it doesn't have Multi-Valued Dependency.

通俗讲范式：
1）第一范式：属性不可拆分。
2）第二范式：每个表中的非主属性完全依赖于码。
3）第三范式：消除非主属性之间的依赖关系，只保留非主属性与码的依赖关系。
（消除传递函数依赖的另一说法，本质是一样的）
4）BC范式：每个表中只有一个候选键。





2. Advanced Select

Case具有两种格式。简单Case函数和Case搜索函数。 
--简单Case函数 
CASE sex 
         WHEN '1' THEN '男' 
         WHEN '2' THEN '女' 
ELSE '其他' END 
--Case搜索函数 
CASE WHEN sex = '1' THEN '男' 
         WHEN sex = '2' THEN '女' 
ELSE '其他' END 



IF(expr1,expr2,expr3) 
如果expr1是TRUE(expr1<>;0且expr1<>;NULL)，那么IF()返回expr2，否则它返回expr3。IF()返回一个数字或字符串值，取决于它被使用的上下文。 

<> not equal to

select IF(1>;2,2,3);  //3
select IF(1<2,'yes','no');  //yes
select IF(strcmp('test','test1'),'yes','no');  //no

原文出自：www.hangge.com  转载请保留原文链接：http://www.hangge.com/blog/cache/detail_682.html



3. Aggregation

sql start: /usr/local/Cellar/mysql/5.7.20/support-files
mysql.server start

database default order by is asc not desc

LIMIT reference: https://segmentfault.com/a/1190000008859706



4. Basic Join

oracle if-else reference:
http://www.cnblogs.com/eshizhan/archive/2012/04/06/2435493.html

inner,outer,left,right,full join reference:
https://www.cnblogs.com/BeginMan/p/3754322.html
https://www.hackerrank.com/challenges/full-score/problem










